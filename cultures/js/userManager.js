// ============================================
// USER MANAGER - Gestion utilisateurs et cookies
// ============================================

class UserManager {
  constructor() {
    this.currentUser = null;
    this.questionsAnswered = [];
    this.incorrectAnswers = {}; // { questionId: { count, lastAttempt, nextRetry } }
    
    // Pr√©fixe unique pour √©viter les conflits
    this.COOKIE_PREFIX = 'cultures_game_';
    
    // üîê Int√©gration du SessionManager
    this.sessionManager = new SessionManager();
    
    // üöÄ Auto-restauration de la session au chargement
    this.restoreSession();
    
    // üßπ Nettoyer les vieux cookies (migration vers localStorage)
    this.cleanupOldCookies();
  }
  
  // üßπ Nettoyer tous les vieux cookies du jeu (migration vers localStorage)
  cleanupOldCookies() {
    try {
      const cookies = document.cookie.split(';');
      let cleanedCount = 0;
      
      cookies.forEach(cookie => {
        const name = cookie.split('=')[0].trim();
        // Supprimer les cookies des jeux (cultures, math, mots, categories)
        if (name.includes('_game_') || name.includes('game_')) {
          document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;`;
          cleanedCount++;
        }
      });
      
      if (cleanedCount > 0) {
        console.log(`üßπ ${cleanedCount} vieux cookies nettoy√©s et migr√©s vers localStorage`);
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è Erreur nettoyage cookies:', e);
    }
  }
  
  // üöÄ Restaurer la session automatiquement au chargement
  restoreSession() {
    if (this.sessionManager.isLoggedIn()) {
      const username = this.sessionManager.getCurrentUser();
      console.log(`üîÑ Restauration automatique de la session : ${username}`);
      
      // Restaurer l'utilisateur dans le UserManager
      this.currentUser = username;
      this.loadUserData();
      
      return true;
    }
    return false;
  }

  // Connexion d'un utilisateur
  login(username) {
    if (!username || username.trim() === '') {
      return false;
    }

    this.currentUser = username.trim();
    
    // üîê Cr√©er une session persistante (survit au refresh)
    this.sessionManager.login(this.currentUser);
    
    this.loadUserData();
    
    // Si c'est un nouvel utilisateur (pas de cookie), cr√©er un cookie vide
    if (this.questionsAnswered.length === 0) {
      this.saveUserData();
    }
    
    return true;
  }

  // D√©connexion
  logout() {
    // üîê D√©connexion de la session
    this.sessionManager.logout();
    
    this.currentUser = null;
    this.questionsAnswered = [];
    this.incorrectAnswers = {};
  }

  // Charger les donn√©es utilisateur depuis les cookies
  loadUserData() {
    if (!this.currentUser) return;

    console.log('üìÇ Chargement des donn√©es pour:', this.currentUser);

    // Charger les questions r√©pondues
    const questionsAnsweredCookie = this.getCookie(`${this.COOKIE_PREFIX}questionsAnswered_${this.currentUser}`);
    if (questionsAnsweredCookie) {
      try {
        const loaded = JSON.parse(questionsAnsweredCookie);
        console.log('üì• Questions charg√©es depuis cookie:', loaded);
        
        // Nettoyer les doublons
        this.questionsAnswered = [...new Set(loaded)];
        
        console.log('üßπ Questions apr√®s nettoyage des doublons:', this.questionsAnswered);
        
        // Sauvegarder les donn√©es nettoy√©es
        this.saveUserData();
      } catch (e) {
        console.error('‚ùå Erreur lors du chargement des questions:', e);
      }
    } else {
      console.log('‚ÑπÔ∏è Aucune question sauvegard√©e pour cet utilisateur');
    }
    
    // Charger les r√©ponses incorrectes
    const incorrectCookie = this.getCookie(`${this.COOKIE_PREFIX}incorrectAnswers_${this.currentUser}`);
    if (incorrectCookie) {
      try {
        this.incorrectAnswers = JSON.parse(incorrectCookie);
        console.log(`‚ùå R√©ponses incorrectes charg√©es: ${Object.keys(this.incorrectAnswers).length}`);
      } catch (e) {
        console.error('‚ùå Erreur lors du chargement des r√©ponses incorrectes:', e);
      }
    }
  }

  // Sauvegarder les donn√©es utilisateur
  saveUserData() {
    if (!this.currentUser) return;

    console.log('üíæ Sauvegarde des donn√©es pour:', this.currentUser);
    console.log('üìù Questions √† sauvegarder:', this.questionsAnswered);

    // Sauvegarder les questions r√©pondues
    this.setCookie(`${this.COOKIE_PREFIX}questionsAnswered_${this.currentUser}`, JSON.stringify(this.questionsAnswered), 365);
    
    // Sauvegarder les r√©ponses incorrectes
    this.setCookie(`${this.COOKIE_PREFIX}incorrectAnswers_${this.currentUser}`, JSON.stringify(this.incorrectAnswers), 365);
    
    console.log('‚úÖ Sauvegarde termin√©e');
  }

  // Ajouter une question r√©pondue correctement
  addQuestionAnswered(questionId) {
    if (!this.currentUser) return;
    
    // V√©rifier si la question n'est pas d√©j√† dans la liste
    if (!this.questionsAnswered.includes(questionId)) {
      console.log(`‚ûï Ajout de la question "${questionId}"`);
      this.questionsAnswered.push(questionId);
      console.log(`üìä Total de questions r√©pondues: ${this.questionsAnswered.length}`);
      
      // Supprimer des incorrectes si elle y √©tait
      if (this.incorrectAnswers[questionId]) {
        delete this.incorrectAnswers[questionId];
        console.log(`‚úÖ Question retir√©e des incorrectes`);
      }
      
      this.saveUserData();
    } else {
      console.log(`‚ö†Ô∏è Question "${questionId}" d√©j√† r√©pondue, pas d'ajout`);
    }
  }

  // Obtenir les questions r√©pondues
  getQuestionsAnswered() {
    return this.questionsAnswered || [];
  }

  // Obtenir les questions disponibles (excluant celles d√©j√† r√©pondues)
  getAvailableQuestions(allQuestions) {
    return allQuestions.filter(questionId => !this.questionsAnswered.includes(questionId));
  }

  // ===== GESTION DES R√âPONSES INCORRECTES =====
  
  // Obtenir les r√©ponses incorrectes
  getIncorrectAnswers() {
    return this.incorrectAnswers;
  }
  
  // Sauvegarder les r√©ponses incorrectes
  saveIncorrectAnswers(incorrectData) {
    this.incorrectAnswers = incorrectData;
    this.saveUserData();
  }
  
  // V√©rifier si un utilisateur existe
  userExists(username) {
    const questionsAnsweredCookie = this.getCookie(`${this.COOKIE_PREFIX}questionsAnswered_${username}`);
    return questionsAnsweredCookie !== null;
  }

  // Obtenir tous les utilisateurs existants
  getAllUsers() {
    const users = [];
    const cookies = document.cookie.split(';');
    
    cookies.forEach(cookie => {
      const trimmed = cookie.trim();
      if (trimmed.startsWith(`${this.COOKIE_PREFIX}questionsAnswered_`)) {
        const username = trimmed.split('=')[0].replace(`${this.COOKIE_PREFIX}questionsAnswered_`, '');
        if (username && !users.includes(username)) {
          users.push(username);
        }
      }
    });
    
    return users.sort();
  }

  // Obtenir toutes les questions r√©pondues
  getAllQuestionsAnswered() {
    return [...new Set(this.questionsAnswered)]; // Supprime les doublons
  }
  
  // R√©initialiser compl√®tement les donn√©es de l'utilisateur (utile pour debug)
  resetAllUserData() {
    if (!this.currentUser) return;
    
    console.log('üóëÔ∏è R√©initialisation compl√®te des donn√©es pour:', this.currentUser);
    
    this.questionsAnswered = [];
    this.incorrectAnswers = {};
    this.saveUserData();
    
    console.log('‚úÖ Toutes les donn√©es ont √©t√© r√©initialis√©es');
  }

  // V√©rifier si un utilisateur est connect√©
  isLoggedIn() {
    return this.currentUser !== null;
  }

  // Obtenir le nom de l'utilisateur connect√©
  getCurrentUser() {
    return this.currentUser;
  }

  // Gestion des cookies
  // Migration vers localStorage au lieu de cookies pour √©viter les limites de taille
  setCookie(name, value, days) {
    try {
      localStorage.setItem(name, value);
      console.log(`üíæ Donn√©e enregistr√©e dans localStorage: ${name} (${value.length} caract√®res)`);
    } catch (e) {
      console.error('‚ùå Erreur localStorage (quota d√©pass√©?):', e);
      // Fallback vers cookie si localStorage √©choue
      const expires = new Date();
      expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
      const encodedValue = encodeURIComponent(value);
      document.cookie = `${name}=${encodedValue};expires=${expires.toUTCString()};path=/`;
      console.log(`üç™ Fallback: Cookie enregistr√©: ${name}`);
    }
  }

  getCookie(name) {
    // V√©rifier d'abord dans localStorage
    try {
      const value = localStorage.getItem(name);
      if (value !== null) {
        return value;
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è Erreur lecture localStorage:', e);
    }
    
    // Fallback: chercher dans les cookies (pour migration depuis ancienne version)
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) === 0) {
        const encodedValue = c.substring(nameEQ.length, c.length);
        const decoded = decodeURIComponent(encodedValue);
        
        // Migrer vers localStorage et supprimer le cookie
        console.log(`üîÑ Migration du cookie "${name}" vers localStorage`);
        try {
          localStorage.setItem(name, decoded);
          // Supprimer le cookie apr√®s migration
          document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;`;
          console.log(`‚úÖ Cookie migr√© et supprim√©: ${name}`);
        } catch (e) {
          console.warn('‚ö†Ô∏è Impossible de migrer vers localStorage:', e);
        }
        
        return decoded;
      }
    }
    return null;
  }

  // Supprimer un cookie
  deleteCookie(name) {
    // Supprimer de localStorage
    try {
      localStorage.removeItem(name);
      console.log(`üóëÔ∏è Donn√©e supprim√©e de localStorage: ${name}`);
    } catch (e) {
      console.warn('‚ö†Ô∏è Erreur suppression localStorage:', e);
    }
    
    // Supprimer aussi le cookie (pour nettoyage)
    document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;`;
  }

  // Sauvegarder les pr√©f√©rences utilisateur
  saveUserPreferences(preferences) {
    this.setCookie(`${this.COOKIE_PREFIX}userPreferences`, JSON.stringify(preferences), 365);
  }

  // Charger les pr√©f√©rences utilisateur
  getUserPreferences() {
    const prefsCookie = this.getCookie(`${this.COOKIE_PREFIX}userPreferences`);
    if (prefsCookie) {
      return JSON.parse(prefsCookie);
    }
    return {
      selectedCategory: 'toutes'
    };
  }
}

