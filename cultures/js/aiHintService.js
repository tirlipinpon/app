// ============================================
// AI HINT SERVICE - G√©n√©ration d'indices par IA
// ============================================

class AIHintService {
  constructor(supabaseService) {
    this.cache = new Map(); // Cache des hints g√©n√©r√©s
    this.usedHints = new Set(); // Hints d√©j√† utilis√©s dans cette session
    this.isLoading = false;
    this.supabaseService = supabaseService;
  }
  
  // ==========================================
  // G√âN√âRATION DE HINTS
  // ==========================================
  
  async generateHint(questionData, hintNumber = 1) {
    const questionId = questionData.id;
    const hintKey = `${questionId}_hint_${hintNumber}`; // ‚úÖ CORRECTION: Ajout de "_hint_"
    
    // Debug: √âtat du cache au d√©but
    console.log(`üîé √âtat du cache au d√©but de generateHint (hint ${hintNumber} pour ${questionId}):`);
    console.log(`   - Taille totale du cache: ${this.cache.size}`);
    console.log(`   - Cl√©s dans le cache:`, Array.from(this.cache.keys()));
    
    // Pour les questions INPUT : 3 hints autoris√©s
    // Pour les autres types : 2 hints
    const maxHints = questionData.type === 'input' || questionData.type === 'remplir-blancs'
      ? (CONFIG.HINT_SYSTEM?.maxHintsInput || 3)
      : (CONFIG.HINT_SYSTEM?.maxHintsOther || 2);
    
    // V√©rifier si tous les hints ont √©t√© utilis√©s
    let usedCount = 0;
    for (let i = 1; i <= maxHints; i++) {
      if (this.usedHints.has(`${questionId}_hint_${i}`)) { // ‚úÖ CORRECTION: Ajout de "_hint_"
        usedCount++;
      }
    }
    
    if (usedCount >= maxHints) {
      console.log(`‚ö†Ô∏è Tous les hints utilis√©s pour cette question (${usedCount}/${maxHints})`);
      return null;
    }
    
    // V√©rifier si hint existe d√©j√† dans la question (DB) - seulement hint 1
    if (hintNumber === 1 && questionData.hint) {
      console.log(`üíæ Hint 1 trouv√© dans la DB: ${questionData.hint}`);
      // ‚úÖ CORRECTION: Mettre en cache pour que les hints suivants le trouvent
      this.cache.set(hintKey, questionData.hint);
      this.usedHints.add(hintKey);
      console.log(`üíæ Hint 1 de la DB mis en cache avec la cl√©: "${hintKey}"`);
      return questionData.hint;
    }
    
    // V√©rifier le cache local
    if (this.cache.has(hintKey)) {
      console.log(`üíæ Hint ${hintNumber} trouv√© dans le cache local`);
      const hint = this.cache.get(hintKey);
      this.usedHints.add(hintKey);
      return hint;
    }
    
    // V√©rifier si l'API est configur√©e
    if (!isApiKeyConfigured()) {
      console.warn('‚ö†Ô∏è API IA non configur√©e');
      return this.getFallbackHint(questionData, hintNumber);
    }
    
    // G√©n√©rer avec l'IA
    try {
      console.log(`ü§ñ G√©n√©ration du hint ${hintNumber} par IA pour: ${questionId}`);
      const messages = this.createMessagesArray(questionData, hintNumber);
      console.log(`üìö Historique des messages (${messages.length} messages):`, messages);
      const hint = await this.callDeepSeekAPI(messages);
      
      if (hint) {
        // Mettre en cache
        this.cache.set(hintKey, hint);
        this.usedHints.add(hintKey);
        console.log(`üíæ Hint sauvegard√© dans le cache avec la cl√©: "${hintKey}"`);
        console.log(`üìä Taille du cache apr√®s sauvegarde: ${this.cache.size}`);
        
        // Sauvegarder dans Supabase (seulement hint 1)
        if (hintNumber === 1 && this.supabaseService && this.supabaseService.isReady()) {
          await this.supabaseService.saveHint(questionId, hint);
        }
        
        console.log(`‚úÖ Hint ${hintNumber} g√©n√©r√© et sauvegard√©`);
        return hint;
      }
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration hint:', error);
    }
    
    // Fallback si √©chec
    return this.getFallbackHint(questionData, hintNumber);
  }
  
  // ==========================================
  // SYNTH√àSE VOCALE
  // ==========================================
  
  speakText(text) {
    if ('speechSynthesis' in window) {
      // Arr√™ter toute lecture en cours
      window.speechSynthesis.cancel();
      
      // Filtrer les emojis pour la lecture vocale
      const textWithoutEmojis = this.removeEmojisFromText(text);
      
      const utterance = new SpeechSynthesisUtterance(textWithoutEmojis);
      
      // Configuration pour les enfants
      utterance.rate = 0.8; // Plus lent pour les enfants
      utterance.pitch = 1.2; // Plus aigu et amical
      utterance.volume = 0.8;
      
      // Essayer d'utiliser une voix fran√ßaise
      const voices = window.speechSynthesis.getVoices();
      const frenchVoice = voices.find(voice => 
        voice.lang.includes('fr') || voice.lang.includes('FR')
      );
      
      if (frenchVoice) {
        utterance.voice = frenchVoice;
      }
      
      // Lancer la lecture
      window.speechSynthesis.speak(utterance);
      
      console.log('üîä Lecture vocale lanc√©e (sans emojis):', textWithoutEmojis);
      console.log('üìù Texte original avec emojis:', text);
    } else {
      console.warn('‚ö†Ô∏è Synth√®se vocale non support√©e par ce navigateur');
    }
  }
  
  // Fonction pour supprimer les emojis du texte pour la lecture vocale
  removeEmojisFromText(text) {
    // Regex COMPL√àTE pour tous les emojis Unicode (y compris ‚è≥ sablier, etc.)
    const emojiRegex = /[\u{1F000}-\u{1F9FF}]|[\u{2600}-\u{27BF}]|[\u{2300}-\u{23FF}]|[\u{2B00}-\u{2BFF}]|[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{1F900}-\u{1F9FF}]|[\u{1FA00}-\u{1FA6F}]|[\u{1FA70}-\u{1FAFF}]|[\u{2700}-\u{27BF}]|[\u{FE00}-\u{FE0F}]|[\u{1F018}-\u{1F270}]|[\u{238C}-\u{2454}]|[\u{20D0}-\u{20FF}]|[\u{E0020}-\u{E007F}]/gu;
    
    // Supprimer aussi les caract√®res de variation (variation selectors)
    const variationSelectors = /[\uFE00-\uFE0F]/gu;
    
    // Remplacer les emojis et variation selectors par des espaces
    let cleaned = text.replace(emojiRegex, ' ').replace(variationSelectors, ' ');
    
    // Nettoyer les espaces multiples et trim
    cleaned = cleaned.replace(/\s+/g, ' ').trim();
    
    console.log('üîá Texte nettoy√© pour lecture vocale:');
    console.log('  Avant:', text.substring(0, 100) + '...');
    console.log('  Apr√®s:', cleaned.substring(0, 100) + '...');
    
    return cleaned;
  }
  
  stopSpeaking() {
    if ('speechSynthesis' in window) {
      window.speechSynthesis.cancel();
      console.log('üîá Lecture vocale arr√™t√©e');
    }
  }

  // ==========================================
  // HISTORIQUE DES HINTS
  // ==========================================
  
  getHintHistory(questionId, currentHintNumber) {
    if (currentHintNumber === 1) {
      return ''; // Pas d'historique pour le premier hint
    }
    
    let historyText = '';
    const questionKey = questionId.split('_')[0]; // Extraire la partie commune de l'ID
    
    // R√©cup√©rer les hints pr√©c√©dents depuis le cache
    for (let i = 1; i < currentHintNumber; i++) {
      const previousHintKey = `${questionId}_hint_${i}`;
      const previousHint = this.cache.get(previousHintKey);
      
      if (previousHint) {
        historyText += `üí° INDICE ${i} D√âJ√Ä DONN√â : "${previousHint}"\n`;
      } else if (i === 1 && this.supabaseService && this.supabaseService.isReady()) {
        // Pour le hint 1, v√©rifier aussi dans la DB
        // On pourrait ajouter une m√©thode pour r√©cup√©rer le hint depuis la DB
        historyText += `üí° INDICE ${i} D√âJ√Ä DONN√â : (r√©cup√©r√© depuis la base de donn√©es)\n`;
      }
    }
    
    if (historyText) {
      return `üìö CONTEXTE DES INDICES PR√âC√âDENTS :\n${historyText}\nIMPORTANT : Le nouvel indice doit √™tre PLUS PR√âCIS que les pr√©c√©dents, sans r√©p√©ter les m√™mes informations.\n`;
    }
    
    return '';
  }

  // ==========================================
  // CR√âATION DES MESSAGES AVEC HISTORIQUE
  // ==========================================
  
  createMessagesArray(questionData, hintNumber = 1) {
    const questionId = questionData.id;
    const messages = [];
    
    // Message syst√®me initial
    messages.push({
      role: 'system',
      content: `Tu es un assistant p√©dagogique EXPERT pour des ENFANTS de 8 ans qui jouent √† un jeu √©ducatif.

üéØ TON OBJECTIF :
Utilise des SUBTERFUGES INTELLIGENTS pour guider l'enfant vers la r√©ponse sans la donner directement.

üìö STRAT√âGIES P√âDAGOGIQUES INTELLIGENTES :
1. **Associations d'id√©es** : "üí° Pense √† ce qu'on utilise pour... √áa te fait penser √† quoi ?"
2. **Questions socratiques** : "üí° Si tu devais deviner, tu dirais quoi ? Qu'est-ce qui se passe dans ce contexte ?"
3. **Contexte narratif** : "üí° Imagine que tu es dans cette situation... Que vois-tu ? Que se passe-t-il ?"
4. **√âlimination** : "üí° Ce n'est PAS [mauvaise r√©ponse √©vidente]. Alors, qu'est-ce que √ßa peut √™tre ?"
5. **Indices sensoriels** : "üí° Comment √ßa sonne ? √Ä quoi √ßa ressemble ? Quel sentiment √ßa √©voque ?"
6. **D√©composition** : "üí° D√©coupe le probl√®me en petits morceaux. Commence par trouver..."
7. **Analogies** : "üí° C'est comme quand tu... mais appliqu√© √†..."
8. **Indices mn√©motechniques** : "üí° Souviens-toi du truc : la premi√®re lettre de chaque mot..."

üé® UTILISE MASSIVEMENT DES EMOJIS :
- Commence TOUJOURS par "üí°"
- Ajoute 3-5 emojis pertinents par indice
- Exemples : üåçüó∫Ô∏è g√©ographie, üèõÔ∏èüìú histoire, üî¨‚öóÔ∏è science, üé≠üé® culture, üìÖ‚è∞ temps, üßÆ‚ûï maths

‚ö° R√àGLES DE PROGRESSION :
- **Hint 1** (max 20 mots) : question orient√©e + premi√®re piste subtile
- **Hint 2** (max 30 mots) : indices sp√©cifiques + m√©thode de r√©flexion + 1 lettre possible
- **Hint 3** (max 40 mots) : 2-3 premi√®res lettres + plusieurs pistes convergentes

‚ùå INTERDICTION ABSOLUE : Ne JAMAIS donner la r√©ponse compl√®te, m√™me au 3√®me hint !`
    });
    
    // Message initial avec la question
    messages.push({
      role: 'user',
      content: this.createInitialQuestionMessage(questionData)
    });
    
    // Ajouter l'historique des hints pr√©c√©dents
    console.log(`üîç Recherche des hints pr√©c√©dents pour ${questionId} (hint ${hintNumber})`);
    for (let i = 1; i < hintNumber; i++) {
      const previousHintKey = `${questionId}_hint_${i}`;
      const previousHint = this.cache.get(previousHintKey);
      
      console.log(`  üì¶ Cache ${previousHintKey}:`, previousHint ? `"${previousHint}"` : '‚ùå Non trouv√©');
      
      if (previousHint) {
        // Ajouter le hint pr√©c√©dent comme message assistant
        messages.push({
          role: 'assistant',
          content: previousHint
        });
        
        // NE PAS ajouter de message utilisateur interm√©diaire
        // L'IA voit juste sa propre r√©ponse pr√©c√©dente dans l'historique
        console.log(`  ‚úÖ Hint ${i} ajout√© √† l'historique des messages`);
      } else {
        console.warn(`  ‚ö†Ô∏è Hint ${i} manquant dans le cache pour ${questionId}`);
      }
    }
    
    // Message final pour le hint actuel
    messages.push({
      role: 'user',
      content: this.createCurrentHintRequest(questionData, hintNumber)
    });
    
    return messages;
  }
  
  createInitialQuestionMessage(questionData) {
    const question = questionData.question;
    const answer = questionData.answer;
    const type = questionData.type;
    const category = this.getCategoryName(questionData.category);
    const options = questionData.options;
    
    let typeDescription = '';
    switch (type) {
      case 'input': typeDescription = 'une question √† r√©ponse libre'; break;
      case 'qcm': typeDescription = 'un QCM (choix multiple)'; break;
      case 'vrai-faux': typeDescription = 'une question vrai ou faux'; break;
      case 'ordre': typeDescription = 'une question d\'ordre chronologique'; break;
      case 'association': typeDescription = 'une question d\'association'; break;
      case 'glisser-deposer': typeDescription = 'une question de cat√©gorisation'; break;
      case 'remplir-blancs': typeDescription = 'une question √† trous'; break;
    }
    
    let answerText = '';
    if (typeof answer === 'object' && !Array.isArray(answer)) {
      answerText = JSON.stringify(answer);
    } else if (Array.isArray(answer)) {
      answerText = answer.join(', ');
    } else {
      answerText = String(answer);
    }
    
    let optionsText = '';
    if (options && type === 'qcm') {
      optionsText = `\n- Options disponibles : ${options.join(', ')}`;
    }
    
    return `üìù QUESTION : "${question}"${optionsText}
‚úÖ R√âPONSE CORRECTE : ${answerText}
üéØ Type : ${typeDescription}
üìö Cat√©gorie : ${category}

Je vais avoir besoin d'indices progressifs pour cette question.`;
  }
  
  createCurrentHintRequest(questionData, hintNumber) {
    const type = questionData.type;
    const answer = String(questionData.answer);
    
    if (hintNumber === 1) {
      return `üéØ G√âN√àRE LE PREMIER INDICE (50-80 mots) en utilisant des SUBTERFUGES INTELLIGENTS :

üìñ STRAT√âGIES √Ä UTILISER :
1. **Contexte immersif** : Mets l'enfant dans une situation concr√®te
2. **Questions guid√©es** : Pose 2-3 questions qui orientent la r√©flexion
3. **Association d'id√©es** : "Quand tu penses √† X, qu'est-ce qui te vient en t√™te ?"
4. **Indice sensoriel** : √âvoque ce qu'on voit, entend, ressent
5. **Analogie** : Compare avec quelque chose que l'enfant conna√Æt

üé® UTILISE 3-5 EMOJIS pertinents pour illustrer ton indice

‚úÖ EXEMPLE DE BON INDICE 1 :
"üí° Imagine que tu es dans un mus√©e üèõÔ∏è et tu vois une tr√®s vieille peinture üé®. L'artiste qui l'a faite avait un sourire myst√©rieux sur son tableau le plus c√©l√®bre üòä. Il vivait en Italie üáÆüáπ il y a tr√®s longtemps. R√©fl√©chis : qui pourrait-ce √™tre ? ü§î"

‚ùå INTERDICTIONS :
- Ne donne JAMAIS de lettres au hint 1
- Ne nomme PAS directement la r√©ponse
- Reste assez g√©n√©ral mais VRAIMENT UTILE`;
      
    } else if (hintNumber === 2) {
      return `üéØ G√âN√àRE LE DEUXI√àME INDICE (60-100 mots) - Sois BEAUCOUP PLUS PR√âCIS :

üìñ STRAT√âGIES AVANC√âES :
1. **√âlimination intelligente** : "Ce n'est PAS [option √©vidente], mais c'est li√© √†..."
2. **D√©tails concrets** : Donne des FAITS PR√âCIS sans dire la r√©ponse
3. **Indices temporels/g√©ographiques** : Dates, lieux, √©poques
4. **Caract√©ristiques uniques** : Ce qui distingue la r√©ponse
5. **D√©but de r√©ponse** : "√áa commence par la lettre [X]..."
6. **Mn√©motechnique** : "Pense √† la phrase : les premi√®res lettres de..."

üé® UTILISE 4-6 EMOJIS pour rendre l'indice visuel

‚úÖ EXEMPLE DE BON INDICE 2 :
"üí° OK, soyons plus pr√©cis ! üéØ Cette personne vivait pendant la Renaissance üè∞. Son nom commence par un 'L' üìù. Il √©tait √† la fois artiste, inventeur et scientifique üî¨‚ú®. Son tableau le plus c√©l√®bre montre une femme avec un sourire √©nigmatique et se trouve au mus√©e du Louvre √† Paris üá´üá∑. Tu vois de qui je parle ? ü§î"

‚úÖ AUTORIS√â : Donner 1 lettre du d√©but
‚ùå INTERDIT : Donner plus de 2 lettres`;
      
    } else {
      return `üéØ G√âN√àRE LE TROISI√àME INDICE (70-120 mots) - C'est le DERNIER, aide VRAIMENT l'enfant :

üìñ STRAT√âGIES ULTRA-PR√âCISES :
1. **Premi√®res lettres** : Donne les 2-3 premi√®res lettres clairement
2. **Convergence d'indices** : 4-5 faits qui TOUS pointent vers la r√©ponse
3. **Structure de la r√©ponse** : "C'est un mot de X lettres qui..."
4. **Indices multiples** : Temps + Lieu + Caract√©ristique + Premi√®re lettre
5. **√âlimination finale** : "Si tu h√©sites entre A et B, c'est d√©finitivement A parce que..."
6. **Quasi-r√©v√©lation** : "C'est presque comme si je te disais... mais je te laisse finir !"

üé® UTILISE 5-8 EMOJIS pour un indice tr√®s visuel et engageant

‚úÖ EXEMPLE DE BON INDICE 3 :
"üí° Dernier indice, tr√®s pr√©cis ! üéØ La r√©ponse commence par 'LEO...' üìù‚ú® C'est un nom italien qui sonne comme 'L√©onard' en fran√ßais üáÆüáπ‚û°Ô∏èüá´üá∑. Il a v√©cu de 1452 √† 1519 üìÖ. Son tableau 'La Joconde' üñºÔ∏èüòä est le plus c√©l√®bre au monde üåç. Il a aussi dessin√© des inventions folles comme des h√©licopt√®res üöÅ et des tanks ‚öôÔ∏è ! Tu y es presque, juste 2 mots √† trouver ! ü§îüí™"

‚úÖ AUTORIS√â : Donner 2-3 lettres du d√©but + √©norm√©ment de d√©tails
‚ùå INTERDIT : Donner la r√©ponse compl√®te mot pour mot`;
    }
  }

  // ==========================================
  // CR√âATION DU PROMPT (ANCIENNE M√âTHODE - GARD√âE POUR COMPATIBILIT√â)
  // ==========================================
  
  createPrompt(questionData, hintNumber = 1) {
    const question = questionData.question;
    const answer = questionData.answer;
    const type = questionData.type;
    const category = this.getCategoryName(questionData.category);
    const options = questionData.options;
    const questionId = questionData.id;
    
    // R√©cup√©rer l'historique des hints pr√©c√©dents pour cette question
    const hintHistory = this.getHintHistory(questionId, hintNumber);
    
    let typeDescription = '';
    switch (type) {
      case 'input':
        typeDescription = 'une question √† r√©ponse libre';
        break;
      case 'qcm':
        typeDescription = 'un QCM (choix multiple)';
        break;
      case 'vrai-faux':
        typeDescription = 'une question vrai ou faux';
        break;
      case 'ordre':
        typeDescription = 'une question d\'ordre chronologique';
        break;
      case 'association':
        typeDescription = 'une question d\'association';
        break;
      case 'glisser-deposer':
        typeDescription = 'une question de cat√©gorisation';
        break;
      case 'remplir-blancs':
        typeDescription = 'une question √† trous';
        break;
    }
    
    // Formater la r√©ponse selon le type
    let answerText = '';
    if (typeof answer === 'object' && !Array.isArray(answer)) {
      answerText = JSON.stringify(answer);
    } else if (Array.isArray(answer)) {
      answerText = answer.join(', ');
    } else {
      answerText = String(answer);
    }
    
    // Formater les options si pr√©sentes
    let optionsText = '';
    if (options && type === 'qcm') {
      optionsText = `\n- Options disponibles : ${options.join(', ')}`;
    }
    
    // Prompt progressif selon le num√©ro du hint
    let hintInstruction = '';
    if (hintNumber === 1) {
      hintInstruction = `
üìç INDICE 1 (SUBTIL - ANALYSE DE BASE) :
- ANALYSE d'abord la question : quel est le vrai objectif p√©dagogique ?
- Donne un indice G√âN√âRAL qui oriente vers la bonne r√©ponse
- Utilise des ASSOCIATIONS d'id√©es, des CONTEXTES, ou des CARACT√âRISTIQUES
- NE mentionne PAS directement la r√©ponse
- Sois ENCOURAGEANT et P√âDAGOGIQUE
- Maximum 25 mots`;
    } else if (hintNumber === 2) {
      hintInstruction = `
üìç INDICE 2 (PR√âCIS - ANALYSE APPROFONDIE) :
- ANALYSE PLUS PROFONDE : que cherche vraiment cette question ?
- L'enfant a d√©j√† eu un premier indice, il a besoin de BEAUCOUP PLUS DE PR√âCISION
- Donne des D√âTAILS CONCRETS qui permettent VRAIMENT de trouver
- Tu peux mentionner des √âL√âMENTS CL√âS de la r√©ponse (premi√®res lettres, dates, lieux, etc.)
- Reste ENCOURAGEANT mais sois BEAUCOUP PLUS EXPLICITE
- Maximum 30 mots`;
    } else {
      hintInstruction = `
üìç INDICE 3 (TR√àS DIRECT - ANALYSE COMPL√àTE) :
- ANALYSE COMPL√àTE : l'enfant a vraiment besoin d'aide maintenant !
- Sois TR√àS EXPLICITE : donne la premi√®re lettre ou les 2-3 premi√®res lettres
- Mentionne des FAITS PR√âCIS qui m√®nent DIRECTEMENT √† la r√©ponse
- Donne presque la r√©ponse, mais pas compl√®tement
- Maximum 35 mots`;
    }
    
    return `Tu es un assistant p√©dagogique pour des ENFANTS de 8 ans qui jouent √† un jeu √©ducatif.

üìù QUESTION : "${question}"${optionsText}
‚úÖ R√âPONSE CORRECTE : ${answerText}
üéØ Type : ${typeDescription}
üìö Cat√©gorie : ${category}

${hintHistory}

${hintInstruction}

üé® STRAT√âGIES D'INDICES EFFICACES (ANALYSE REQUISE) :

üß† M√âTHODE D'ANALYSE OBLIGATOIRE :
1. ANALYSE la question : quel concept l'enfant doit-il ma√Ætriser ?
2. ANALYSE la r√©ponse : quels √©l√©ments cl√©s permettent de la trouver ?
3. ANALYSE la progression : comment aider sans donner la r√©ponse ?

Pour un QCM :
- Indice 1 : "üí° ANALYSE les options ! Quelle est la logique de cette question ?"
- Indice 2 : "üí° La r√©ponse est '${answerText.charAt(0)}...' et c'est li√© √† [contexte pr√©cis]"

Pour une question √† r√©ponse libre (input) :
- Indice 1 : "üí° ANALYSE : c'est [cat√©gorie g√©n√©rale] connu pour [caract√©ristique]"
- Indice 2 : "üí° ANALYSE PLUS PROFONDE : c'est li√© √† [contexte pr√©cis] et commence par '${answerText.substring(0, 2)}'"
- Indice 3 : "üí° ANALYSE COMPL√àTE : c'est '${answerText.substring(0, 3)}...' [caract√©ristique unique]"

Pour Vrai/Faux :
- Indice 1 : "üí° ANALYSE : r√©fl√©chis aux faits historiques/scientifiques"
- Indice 2 : "üí° ANALYSE APPROFONDIE : [√©l√©ment factuel pr√©cis qui permet de trancher]"

Pour ordre chronologique :
- Indice 1 : "üí° ANALYSE : quel √©v√©nement vient chronologiquement EN PREMIER ?"
- Indice 2 : "üí° ANALYSE PR√âCISE : [ordre logique avec √©l√©ments cl√©s]"

Pour association :
- Indice 1 : "üí° ANALYSE les liens logiques entre les √©l√©ments !"
- Indice 2 : "üí° ANALYSE PLUS PR√âCISE : [connexions sp√©cifiques entre les paires]"

R√àGLES ABSOLUES :
‚úÖ Commence TOUJOURS par "üí°"
‚úÖ ANALYSE OBLIGATOIRE : comprends d'abord la question avant de r√©pondre
‚úÖ PROGRESSION LOGIQUE : chaque hint doit √™tre PLUS PERTINENT que le pr√©c√©dent
‚úÖ Langage SIMPLE pour un enfant de 8 ans
‚úÖ Ton ENCOURAGEANT ("Tu peux y arriver !", "C'est √ßa !", "Bien r√©fl√©chi !")
‚ùå NE DONNE JAMAIS la r√©ponse compl√®te mot pour mot
‚úÖ Donne des INDICES CONCRETS et VRAIMENT UTILES
‚úÖ PENSE COMME UN ENSEIGNANT : quel est le meilleur chemin pour faire comprendre ?

TON INDICE (adapt√© √† un enfant de 8 ans) :`;
  }
  
  // ==========================================
  // APPEL API DEEPSEEK
  // ==========================================
  
  async callDeepSeekAPI(messages, retryCount = 0) {
    try {
      const response = await fetch(CONFIG.DEEPSEEK_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${CONFIG.DEEPSEEK_API_KEY}`
        },
        body: JSON.stringify({
          model: CONFIG.DEEPSEEK_MODEL,
          messages: messages, // Utiliser l'array de messages avec historique
          temperature: CONFIG.AI_HINT_CONFIG.temperature,
          max_tokens: CONFIG.AI_HINT_CONFIG.max_tokens,
          top_p: CONFIG.AI_HINT_CONFIG.top_p
        })
      });
      
      if (!response.ok) {
        throw new Error(`Erreur API: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data.choices && data.choices[0] && data.choices[0].message) {
        const hint = data.choices[0].message.content.trim();
        console.log('‚úÖ Hint re√ßu de l\'IA:', hint);
        return hint;
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'appel API:', error);
      
      // Retry une fois
      if (retryCount === 0) {
        console.log('üîÑ Nouvelle tentative...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        return this.callDeepSeekAPI(prompt, retryCount + 1);
      }
      
      return null;
    }
  }
  
  // ==========================================
  // HINTS DE SECOURS (FALLBACK)
  // ==========================================
  
  getFallbackHint(questionData, hintNumber = 1) {
    const type = questionData.type;
    const answer = questionData.answer;
    
    // Pour les hints fallback, on peut √™tre plus sp√©cifiques
    if (hintNumber === 2 && (type === 'input' || type === 'remplir-blancs')) {
      // Deuxi√®me hint : donner des indices pr√©cis
      const answerStr = String(answer);
      return `üí° Encore un indice : pense bien aux mots-cl√©s de la question. La r√©ponse a ${answerStr.length} lettres !`;
    }
    
    if (hintNumber === 3 && (type === 'input' || type === 'remplir-blancs')) {
      // Troisi√®me hint : donner les premi√®res lettres
      const firstLetters = String(answer).substring(0, 2).toUpperCase();
      return `üí° Dernier indice ! La r√©ponse commence par "${firstLetters}..." Tu peux le faire !`;
    }
    
    // Hints progressifs selon le num√©ro
    const fallbackHints = {
      'input': {
        1: 'üí° Lis bien la question ! Cherche le mot-cl√© principal. Qu\'est-ce qu\'on te demande exactement ?',
        2: 'üí° R√©fl√©chis aux mots importants de la question. La r√©ponse est souvent plus simple qu\'on croit !'
      },
      'qcm': {
        1: 'üí° Strat√©gie gagnante : √âlimine les r√©ponses clairement fausses ! Puis choisis la plus logique parmi celles qui restent.'
      },
      'vrai-faux': {
        1: 'üí° Lis attentivement chaque mot. Demande-toi : "Est-ce que je suis s√ªr(e) que c\'est vrai ?" Si tu doutes, c\'est peut-√™tre faux !'
      },
      'ordre': {
        1: 'üí° Astuce : Trouve d\'abord le tout PREMIER √©l√©ment dans le temps, puis le DERNIER. Ensuite, place ceux du milieu !'
      },
      'association': {
        1: 'üí° Cherche ce qui va ensemble : Quel pays avec quelle capitale ? Quel instrument avec quelle famille ? Fais des liens logiques !'
      },
      'glisser-deposer': {
        1: 'üí° Commence par placer les √©l√©ments dont tu es S√õR(E), m√™me si c\'est juste un ou deux. Ensuite r√©fl√©chis aux autres !'
      },
      'remplir-blancs': {
        1: 'üí° Lis la phrase compl√®te ! Quel type de mot manque : un nom ? un nombre ? un lieu ? √áa t\'aidera √† trouver !'
      }
    };
    
    const hints = fallbackHints[type];
    if (hints && hints[hintNumber]) {
      return hints[hintNumber];
    }
    
    return 'üí° Courage ! Relis bien la question, prends ton temps, et fais confiance √† ce que tu sais. Tu vas trouver !';
  }
  
  // ==========================================
  // UTILITAIRES
  // ==========================================
  
  getCategoryName(categoryId) {
    const category = getCategoryById(categoryId);
    return category ? category.name : 'Culture';
  }
  
  // V√©rifier combien de hints ont √©t√© utilis√©s pour une question
  getUsedHintCount(questionId, questionType) {
    const maxHints = questionType === 'input' || questionType === 'remplir-blancs'
      ? (CONFIG.HINT_SYSTEM?.maxHintsInput || 3)
      : (CONFIG.HINT_SYSTEM?.maxHintsOther || 2);
    let count = 0;
    
    for (let i = 1; i <= maxHints; i++) {
      if (this.usedHints.has(`${questionId}_hint_${i}`)) { // ‚úÖ CORRECTION: Ajout de "_hint_"
        count++;
      }
    }
    
    return { used: count, max: maxHints, canRequestMore: count < maxHints };
  }
  
  // Obtenir le prochain num√©ro de hint √† demander
  getNextHintNumber(questionId, questionType) {
    const stats = this.getUsedHintCount(questionId, questionType);
    if (stats.canRequestMore) {
      return stats.used + 1;
    }
    return null;
  }
  
  // R√©initialiser les hints utilis√©s (nouvelle session)
  resetUsedHints() {
    this.usedHints.clear();
    console.log('üîÑ Hints utilis√©s r√©initialis√©s');
  }
  
  // Vider le cache
  clearCache() {
    this.cache.clear();
    console.log('üóëÔ∏è Cache des hints vid√©');
  }
  
  // Obtenir les statistiques du cache
  getCacheStats() {
    return {
      size: this.cache.size,
      used: this.usedHints.size,
      keys: Array.from(this.cache.keys())
    };
  }
}

